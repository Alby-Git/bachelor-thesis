<tool id="cami_opal" name="CAMI OPAL" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>Evaluation package for metagenome benchmark datasets</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code">
    <![CDATA[
        mkdir -p output inputs &&

        #for $i, $file in enumerate($input_files):
            ln -s '$file.file' './inputs/$file.file.element_identifier' &&
        #end for

        opal.py
        -g '${gold_standard_file}'
        -o output
        #if $normalize:
            -n
        #end if
        #if $filter:
            -f $filter
        #end if
        #if $plot_abundances:
            -p
        #end if
        #if $labels:
            -l $labels
        #end if
        #if $time:
            -t $time
        #end if
        #if $memory:
            -m $memory
        #end if
        #if $desc:
            -d '${desc}'
        #end if
        #if $ranks:
            -r $ranks
        #end if
        #if $metrics_plot_rel:
            --metrics_plot_rel $metrics_plot_rel
        #end if
        #if $metrics_plot_abs:
            --metrics_plot_abs $metrics_plot_abs
        #end if
        #if $branch_length_function:
            -b '$branch_length_function'
        #end if
        #if $normalized_unifrac:
            --normalized_unifrac
        #end if
        #for $i, $file in enumerate($input_files):
            'inputs/$file.file.element_identifier'
        #end for
    ]]>
    </command>
    <inputs>
        <param argument="--gold_standard_file" format="tabular" type="data"
            label="Gold standard file"
            help="Input the gold standard file here" />
        <repeat name="input_files" title="Input files"
            help="Enter multiple input files">
            <param name="file" format="tabular" type="data"
                label="Input files" />
        </repeat>
        <param name="normalize" type="boolean" optional="true"
            label="Normalize samples" />
        <param argument="--filter" type="integer" value="" optional="true"
            label="Filter out the smallest relative abundances summing up to FILTER% within a rank"
            help="Filter out the predictions with the smallest relative abundances summing up to FILTER% within a rank" />
        <param name="plot_abundances" type="boolean" optional="true"
            label="Plot abundances in the gold standard"
            help="Plot abundances in the gold standard (can take some minutes)" />
        <param argument="--labels" type="text" value="" optional="true"
            label="Comma-separated profiles names"
            help="Comma-separated profiles names" />
        <param argument="--time" type="text" value="" optional="true"
            label="Comma-separated runtimes in hours"
            help="Comma-separated runtimes in hours" />
        <param argument="--memory" type="text" value="" optional="true"
            label="Comma-separated memory usages in gigabytes"
            help="Comma-separated memory usages in gigabytes" />
        <param argument="--desc" type="text" value=""
            label="HTML description"
            help="Enter the HTML page description here" />
        <param argument="--ranks" type="text" value="" optional="true"
            label="Highest and lowest taxonomic ranks to consider in performance rankings"
            help="Valid ranks: superkingdom, phylum, class, order, family, genus, species, strain" />
        <param argument="--metrics_plot_rel" type="text" value="" optional="true"
            label="Metrics for spider plot of relative performances"
            help="Valid metrics: w:weighted Unifrac, l:L1 norm, c:completeness, p:purity, f:false positives, t:true positives" />
        <param argument="--metrics_plot_abs" type="text" value="" optional="true"
            label="Metrics for spider plot of absolute performances"
            help="Valid metrics: c:completeness, p:purity, b:Bray-Curtis" />
        <param argument="--branch_length_function" type="text" value="" optional="true"
            label="UniFrac tree branch length function"
            help="Default: 'lambda x: 1/x', where x=tree depth" />
        <param name="normalized_unifrac" type="boolean" optional="true"
            label="Compute normalized version of weighted UniFrac"
            help="Compute normalized version of weighted UniFrac by dividing by the theoretical max unweighted UniFrac" />
    </inputs>
    <outputs>
        <data name="html" format="html" from_work_dir="output/index.html" label="${tool.name}: HTML" />
        <data name="result" format="tabular" from_work_dir="output/results.tsv" label="${tool.name}: Results" />
    </outputs>
    <tests>
        <test expect_num_outputs="2">
            <param name="gold_standard_file" value="test_gold.tsv" ftype="tabular" />
            <repeat name="input_files">
                <param name="file" value="test_input1.tsv" ftype="tabular" />
                <param name="file" value="test_input2.tsv" ftype="tabular" />
            </repeat>
            <param name="normalize" value="true" />
            <param name="filter" value="5" />
            <param name="plot_abundances" value="true" />
            <param name="labels" value="label1,label2" />
            <param name="time" value="1,2" />
            <param name="memory" value="4,8" />
            <param name="desc" value="TEST FOR GALAXY" />
            <param name="ranks" value="superkingdom,species" />
            <param name="metrics_plot_rel" value="w,l,c,p,f" />
            <param name="metrics_plot_abs" value="c,p" />
            <param name="branch_length_function" value="lambda x: 1/x" />
            <param name="normalized_unifrac" value="true" />
            <output name="result">
                <assert_contents>
                    <has_text text="test1" n="1" />
                </assert_contents>
            </output>
            <output name="html">
                <assert_contents>
                    <has_text text="TEST FOR GALAXY" n="1" />
                </assert_contents>
            </output>
        </test>
    </tests>
    <help>
    <![CDATA[
        .. class:: infomark

        **What is OPAL**

        OPAL is an evaluation package for the comparative assessment of metagenome benchmark datasets. It calculates multiple metrics per dataset and provides results rankings and visualizations for assessing multiple programs or parameter effects.

        **What it does**

        OPAL performs the following key tasks:
        - Evaluates profiles using a gold standard file.
        - Generates multiple metrics for each profile.
        - Provides comparative visualizations and performance rankings.

        For more information, please visit `OPAL on GitHub <https://github.com/CAMI-challenge/OPAL>`_.

        **Input**

        OPAL requires the following inputs:

        1. **Gold Standard File**
            - This file is essential for the evaluation and should be in tabular format.

        2. **Profiles Files**
            - Multiple profiles files are required for evaluation. These files should also be in tabular format.

        **Optional Arguments**

        - **Normalization**: Normalize the samples.
        - **Filter**: Filter out the predictions with the smallest relative abundances summing up to the specified percentage within a rank.
        - **Plot Abundances**: Generate plots for abundances in the gold standard (can take some minutes).
        - **Labels**: Comma-separated names for the profiles.
        - **Runtime**: Comma-separated runtimes in hours for each profile.
        - **Memory Usage**: Comma-separated memory usages in gigabytes for each profile.
        - **Description**: Description for the HTML page output.
        - **Ranks**: Comma-separated highest and lowest taxonomic ranks to consider in performance rankings. Valid ranks include superkingdom, phylum, class, order, family, genus, species, and strain.
        - **Metrics for Relative Performance Plot**: Comma-separated metrics for the spider plot of relative performances. Valid metrics include weighted Unifrac (w), L1 norm (l), completeness (c), purity (p), false positives (f), and true positives (t).
        - **Metrics for Absolute Performance Plot**: Comma-separated metrics for the spider plot of absolute performances. Valid metrics include completeness (c), purity (p), and Bray-Curtis (b).
        - **UniFrac Tree Branch Length Function**: Function for computing UniFrac tree branch length. Default is "lambda x: 1/x", where x is the tree depth.
        - **Normalized UniFrac**: Compute normalized version of weighted UniFrac by dividing by the theoretical max unweighted UniFrac.

        **Outputs**

        OPAL generates the following outputs:

        1. **HTML Report**: An HTML file containing visualizations and summary of the evaluation.
        2. **Results File**: A TSV file with detailed evaluation metrics for each profile.

        **Additional Information**

        OPAL requires specific Python packages to run. Ensure all dependencies are installed. For more information, refer to the `OPAL GitHub page <https://github.com/CAMI-challenge/OPAL>`_.
    ]]>
    </help>
    <expand macro="citations" />
</tool>
